"use strict";
const _ = require("underscore");
const compareVersions = require("compare-versions");
function escapeChar(match) {
    switch (match) {
        case '&': return '&amp;';
        case '"': return '&quot;';
        case "'": return '&#39;';
        case '<': return '&lt;';
        case '>': return '&gt;';
        case ' ': return '&nbsp;';
        default: return match;
    }
}
function escapeString(inp) {
    return inp.replace(/[&"'<>]/g, escapeChar);
}
function escapeStringNbsp(inp) {
    return inp.replace(/[&"'<> ]/g, escapeChar);
}
function pushScope(scopeStack, scope, html) {
    scopeStack.push(scope);
    html.push(`<span class="${scope.replace(/\.+/g, ' ')}">`);
}
function popScope(scopeStack, html) {
    scopeStack.pop();
    html.push('</span>');
}
function updateScopeStack(scopeStack, desiredScopes, html) {
    let excessScopes = scopeStack.length - desiredScopes.length;
    if (excessScopes > 0) {
        while (excessScopes--) {
            popScope(scopeStack, html);
        }
    }
    let lasti = 0;
    for (let i = scopeStack.length; i >= 0; --i) {
        if (_.isEqual(scopeStack.slice(0, i), desiredScopes.slice(0, i))) {
            lasti = i;
            break;
        }
        popScope(scopeStack, html);
    }
    for (let j = lasti; j < desiredScopes.length; ++j) {
        pushScope(scopeStack, desiredScopes[j], html);
    }
}
const defaultOptions = {
    nbsp: true,
    lineDivs: false,
    editorDiv: false,
    wrapCode: false,
    editorDivTag: 'div',
    editorDivClass: 'editor editor-colors',
    nullScope: 'text.plain.null-grammar',
};
module.exports = function highlightSync(options) {
    const registry = atom.grammars.textmateRegistry || atom.grammars;
    const o = Object.assign({}, defaultOptions, options);
    const grammar = registry.grammarForScopeName(o.scopeName) || (o.nullScope ? registry.grammarForScopeName(o.nullScope) : undefined);
    if (grammar === undefined) {
        throw new Error(`Grammar ${o.scopeName} not found, and no ${o.nullScope} grammar`);
    }
    const lineTokens = grammar.tokenizeLines(o.fileContents);
    if (lineTokens.length > 0) {
        const lastLineTokens = lineTokens[lineTokens.length - 1];
        if (lastLineTokens.length === 1 && lastLineTokens[0].value === '') {
            lineTokens.pop();
        }
    }
    const escape = o.nbsp ? escapeStringNbsp : escapeString;
    const html = [];
    if (o.editorDiv)
        html.push(`<${o.editorDivTag} class="${o.editorDivClass}">`);
    if (o.wrapCode)
        html.push('<code>');
    for (const tokens of lineTokens) {
        const scopeStack = [];
        if (o.lineDivs)
            html.push('<div class="line">');
        for (const { value, scopes } of tokens) {
            let newScopes = scopes;
            if (compareVersions(atom.getVersion(), '1.13.0') >= 0) {
                newScopes = scopes.map((s) => `syntax--${s.replace(/\./g, '.syntax--')}`);
            }
            updateScopeStack(scopeStack, newScopes, html);
            html.push(`<span>${escape(value)}</span>`);
        }
        while (scopeStack.length > 0) {
            popScope(scopeStack, html);
        }
        if (o.lineDivs)
            html.push('</div>');
        html.push('\n');
    }
    if (o.wrapCode)
        html.push('</code>');
    if (o.editorDiv)
        html.push(`</${o.editorDivTag}>`);
    return html.join('');
};
//# sourceMappingURL=data:application/json;base64,