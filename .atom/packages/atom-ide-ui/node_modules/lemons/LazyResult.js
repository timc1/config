"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Success = exports.Failure = exports.Loading = exports.Initial = exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * LazyResult error result
 *     = Initial
 *     | Loading
 *     | Failure error
 *     | Success result
 */
var Initial = 'Initial';
var Loading = 'Loading';
var Failure = 'Failure';
var Success = 'Success'; // prettier-ignore

var nothing = function nothing() {
  return undefined;
};
/**
 * Represents a union type that's in either one of these four stages: Initial,
 * Loading, Failure, or Success.
 *
 *     LazyResult error result
 *         = Initial
 *         | Loading
 *         | Failure error
 *         | Success result
 *
 */


var LazyResult =
/*#__PURE__*/
function () {
  /**
   * **Do not call this constructor directly!**  Use either `Maybe.just()` or
   * `Maybe.nothing()` to construct a new Maybe instance.
   */
  function LazyResult(r) {
    _classCallCheck(this, LazyResult);

    this._r = r;
  }
  /**
   * Create a new LazyResult instance representing a computation that has not
   * yet begun.
   */


  _createClass(LazyResult, [{
    key: "toString",
    value: function toString() {
      var r = this._r;

      if (r.type === Initial) {
        return 'Initial';
      } else if (r.type === Loading) {
        return 'Loading';
      } else if (r.type === Failure) {
        return "Failure(".concat(String(r.error), ")");
      } else {
        return "Success(".concat(String(r.result), ")");
      }
    }
  }, {
    key: "isInitial",
    value: function isInitial() {
      return this._r.type === Initial;
    }
  }, {
    key: "isLoading",
    value: function isLoading() {
      return this._r.type === Loading;
    }
  }, {
    key: "isFailure",
    value: function isFailure() {
      return this._r.type === Failure;
    }
  }, {
    key: "isSuccess",
    value: function isSuccess() {
      return this._r.type === Success;
    }
  }, {
    key: "dispatch",
    value: function dispatch(initialCallback, loadingCallback, failureCallback, successCallback) {
      var r = this._r;

      if (r.type === Initial) {
        return initialCallback();
      } else if (r.type === Loading) {
        return loadingCallback();
      } else if (r.type === Failure) {
        return failureCallback(r.error);
      } else {
        return successCallback(r.result);
      }
    }
  }, {
    key: "value",
    value: function value() {
      return this.dispatch(nothing, nothing, nothing, function (x) {
        return x;
      });
    }
  }, {
    key: "error",
    value: function error() {
      return this.dispatch(nothing, nothing, function (x) {
        return x;
      }, nothing);
    }
  }], [{
    key: "initial",
    value: function initial() {
      return new LazyResult({
        type: Initial
      });
    }
    /**
     * Create a new LazyResult instance representing a computation that has
     * started, but not yet finished.
     */

  }, {
    key: "loading",
    value: function loading() {
      return new LazyResult({
        type: Loading
      });
    }
    /**
     * Create a new LazyResult instance representing a failure.
     */

  }, {
    key: "failure",
    value: function failure(error) {
      return new LazyResult({
        type: Failure,
        error: error
      });
    }
    /**
     * Create a new LazyResult instance representing a successfully computed
     * value.
     */

  }, {
    key: "success",
    value: function success(result) {
      return new LazyResult({
        type: Success,
        result: result
      });
    }
  }]);

  return LazyResult;
}();

exports["default"] = LazyResult;

var _Initial = function _Initial() {
  return LazyResult.initial();
};

exports.Initial = _Initial;

var _Loading = function _Loading() {
  return LazyResult.loading();
};

exports.Loading = _Loading;

var _Failure = function _Failure(error) {
  return LazyResult.failure(error);
};

exports.Failure = _Failure;

var _Success = function _Success(result) {
  return LazyResult.success(result);
}; // prettier-ignore


exports.Success = _Success;